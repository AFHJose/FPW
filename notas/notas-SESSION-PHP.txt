PHP COOKIE 

    es un peque√±o archivo que un servidor guarda en la pc del usuario para identificarlo, cada vez que esta computadora solicita
    una pagina al servidor, la pc envia tambien la cookie junto con la request, 

    CREAR COOKIE

        setcookie(name, value, expire, path, domain, secure, httponly);

        solo name es obligatorio 

        ej:

            <?php
            $cookie_name = "user";
            $cookie_value = "John Doe";
            setcookie($cookie_name, $cookie_value, time() + (86400 * 30), "/"); // 86400 = 1 day
            ?>
            <html>
            <body>

            <?php
            if(!isset($_COOKIE[$cookie_name])) {
            echo "Cookie named '" . $cookie_name . "' is not set!";
            } else {
            echo "Cookie '" . $cookie_name . "' is set!<br>";
            echo "Value is: " . $_COOKIE[$cookie_name];
            }
            ?>

            </body>
            </html>

            We then retrieve the value of the cookie "user" (using the global variable $_COOKIE). 
            
            We also use the isset() function to find out if the cookie is set

            The setcookie() function must appear BEFORE the <html> tag.

            The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead).

    MODIFICAR COOKIE

        To modify a cookie, just set (again) the cookie using the setcookie() function (OVERWRITE)

        <?php
        $cookie_name = "user";
        $cookie_value = "Alex Porter";
        setcookie($cookie_name, $cookie_value, time() + (86400 * 30), "/");
        ?>
        <html>
        <body>

        <?php
        if(!isset($_COOKIE[$cookie_name])) {
        echo "Cookie named '" . $cookie_name . "' is not set!";
        } else {
        echo "Cookie '" . $cookie_name . "' is set!<br>";
        echo "Value is: " . $_COOKIE[$cookie_name];
        }
        ?>

        </body>
        </html>

    BORRAR COOKIE

        To delete a cookie, use the setcookie() function with an expiration date in the past

        <?php
        // set the expiration date to one hour ago
        setcookie("user", "", time() - 3600);
        ?>
        <html>
        <body>

        <?php
        echo "Cookie 'user' is deleted.";
        ?>

        </body>
        </html>

    COMPROBAR COOKIE ACTIVA / DISPONIBLE 

        First, try to create a test cookie with the setcookie() function, then count the $_COOKIE array variable

        <?php
        setcookie("test_cookie", "test", time() + 3600, '/');
        ?>
        <html>
        <body>

        <?php
        if(count($_COOKIE) > 0) {
        echo "Cookies are enabled.";
        } else {
        echo "Cookies are disabled.";
        }
        ?>

        </body>
        </html>

        $_COOKIE es un array asociativo

PHP SESSIONS

    A session is a way to store information (in variables) to be used across multiple pages.

    Unlike a cookie, the information is not stored on the users computer.

    By default, session variables last until the user closes the browser.

    Session variables hold information about one single user, and are available to all pages in one application.

    If you need a permanent storage, you may want to store the data in a database.

    START PHP SESSION 

        A session is started with the session_start() function

        Session variables are set with the PHP global variable: $_SESSION.

        <?php
        // Start the session
        session_start();
        ?>
        <!DOCTYPE html>
        <html>
        <body>

        <?php
        // Set session variables
        $_SESSION["favcolor"] = "green";
        $_SESSION["favanimal"] = "cat";
        echo "Session variables are set.";
        ?>

        </body>
        </html>

        $_SESSION es un array asociativo

        The session_start() function must be the very first thing in your document. Before any HTML tags.

    Acceder a las variables de PHP session

        <?php
        session_start();
        ?>
        <!DOCTYPE html>
        <html>
        <body>

        <?php
        // Echo session variables that were set on previous page
        echo "Favorite color is " . $_SESSION["favcolor"] . ".<br>";
        echo "Favorite animal is " . $_SESSION["favanimal"] . ".";
        ?>

        </body>
        </html>

*FACEBOOK SESSION ES UNA COOKIE, sin las COOKIES activas el sistema de login no funciona 

        show all the session variable values

            <?php
            session_start();
            ?>
            <!DOCTYPE html>
            <html>
            <body>

            <?php
            print_r($_SESSION);
            ?>

            </body>
            </html>

    ****Most sessions set a user-key on the user's computer that looks something like this: 765487cf34ert8dede5a562e4f3a7e12. Then, when a session is opened on another page, it scans the computer for a user-key. If there is a match, it accesses that session, if not, it starts a new session.

    Modify a PHP Session Variable

        To change a session variable, just overwrite it

        <?php
        session_start();
        ?>
        <!DOCTYPE html>
        <html>
        <body>

        <?php
        // to change a session variable, just overwrite it
        $_SESSION["favcolor"] = "yellow";
        print_r($_SESSION);
        ?>

        </body>
        </html>

    Destroy a PHP Session

        <?php
        session_start();
        ?>
        <!DOCTYPE html>
        <html>
        <body>

        <?php
        // remove all session variables
        session_unset();

        // destroy the session
        session_destroy();
        ?>

        </body>
        </html>
    
PHP Filters

    Validating data = Determine if the data is in proper form.

    Sanitizing data = Remove any illegal character from the data.

    The filter_list() function can be used to list what the PHP filter extension offers

    The filter_var() function filters a single variable with a specified filter. It takes two pieces of data:

        The variable you want to check
        The type of check to use

    The following example uses the filter_var() function to remove all HTML tags from a string

        <?php
        $str = "<h1>Hello World!</h1>";
        $newstr = filter_var($str, FILTER_SANITIZE_STRING);
        echo $newstr;
        ?>

    comprobar si es int 

        <?php
        $int = 100;

        if (!filter_var($int, FILTER_VALIDATE_INT) === false) {
        echo("Integer is valid");
        } else {
        echo("Integer is not valid");
        }
        ?>

        filtrar el caso problematico de int=0 que se resuelve como no entero

        <?php
        $int = 0;

        if (filter_var($int, FILTER_VALIDATE_INT) === 0 || !filter_var($int, FILTER_VALIDATE_INT) === false) {
        echo("Integer is valid");
        } else {
        echo("Integer is not valid");
        }
        ?>

    IP:
        <?php
        $ip = "127.0.0.1";

        if (!filter_var($ip, FILTER_VALIDATE_IP) === false) {
        echo("$ip is a valid IP address");
        } else {
        echo("$ip is not a valid IP address");
        }
        ?>

    CORREO:

        <?php
        $email = "john.doe@example.com";

        // Remove all illegal characters from email
        $email = filter_var($email, FILTER_SANITIZE_EMAIL);

        // Validate e-mail
        if (!filter_var($email, FILTER_VALIDATE_EMAIL) === false) {
        echo("$email is a valid email address");
        } else {
        echo("$email is not a valid email address");
        }
        ?>

    URL 

        <?php
        $url = "https://www.w3schools.com";

        // Remove all illegal characters from a url
        $url = filter_var($url, FILTER_SANITIZE_URL);

        // Validate url
        if (!filter_var($url, FILTER_VALIDATE_URL) === false) {
        echo("$url is a valid URL");
        } else {
        echo("$url is not a valid URL");
        }
        ?>


    INT DENTRO DE RANGO 

        <?php
        $int = 122;
        $min = 1;
        $max = 200;

        if (filter_var($int, FILTER_VALIDATE_INT, array("options" => array("min_range"=>$min, "max_range"=>$max))) === false) {
        echo("Variable value is not within the legal range");
        } else {
        echo("Variable value is within the legal range");
        }
        ?>

PHP CALLBACK FUNCTION 

    una funcion se pasa como argumento a otra funcion 

PHP JSON 

    JavaScript Object Notation 

    json_encode()

        <?php
        $age = array("Peter"=>35, "Ben"=>37, "Joe"=>43); (ARRAY ASOCIATIVO)

        echo json_encode($age); (CONVERTIDO A JSON resulta en {"Peter":35,"Ben":37,"Joe":43}) 
        ?>

        <?php
        $cars = array("Volvo", "BMW", "Toyota"); (ARRAY TRADICIONAL CON INDICE NUMERICO)

        echo json_encode($cars);(CONVERTIDO A JSON resulta en ["Volvo","BMW","Toyota"]) 
        ?>

    json_decode()

        <?php
        $jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';

        var_dump(json_decode($jsonobj)); (RESULTA EN EL OBJETO { ["Peter"]=> int(35) ["Ben"]=> int(37) ["Joe"]=> int(43) })
        ?>

        The json_decode() function returns an object by default. The json_decode() function has a second parameter, and when set to true, JSON objects are decoded into associative arrays.

        <?php
        $jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';

        var_dump(json_decode($jsonobj, true)); (RESULTA EN ARRAY ASOCIATIVO { ["Peter"]=> int(35) ["Ben"]=> int(37) ["Joe"]=> int(43) })
        ?>

    
    ACCEDER A LOS VALORES DESPUES DEL DECODE 

        caso OBJETO

            <?php
            $jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';

            $obj = json_decode($jsonobj);

            echo $obj->Peter;
            echo $obj->Ben;
            echo $obj->Joe;
            ?>

        caso ARRAY ASOCIATIVO 

            <?php
            $jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';

            $arr = json_decode($jsonobj, true);

            echo $arr["Peter"];
            echo $arr["Ben"];
            echo $arr["Joe"];
            ?>

        ITERACION 

            <?php
            $jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';

            $obj = json_decode($jsonobj);

            foreach($obj as $key => $value) {
            echo $key . " => " . $value . "<br>";
            }
            ?>

            <?php
            $jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';

            $arr = json_decode($jsonobj, true);

            foreach($arr as $key => $value) {
            echo $key . " => " . $value . "<br>";
            }
            ?>

PHP Form Handling

    The PHP superglobals $_GET and $_POST are used to collect form-data.

    estas variables son array asociativos que contienen los valores enviados en un formulario con el nombre 
    en las input tags como key y la entrada como value 

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">

    The $_SERVER["PHP_SELF"] is a super global variable that returns the filename of the currently executing script.

     $_SERVER["PHP_SELF"] sends the submitted form data to the page itself,

     htmlspecialchars() function converts special characters to HTML entities. This means that it will replace HTML characters like < and > with &lt; and &gt;. This prevents attackers from exploiting the code by injecting HTML or Javascript code 

    $_SERVER["PHP_SELF"] exploits can be avoided by using the htmlspecialchars() function.

    Validate Form Data With PHP

        The first thing we will do is to pass all variables through PHP's htmlspecialchars() function.

        Strip unnecessary characters (extra space, tab, newline) from the user input data (with the PHP trim() function)

        Remove backslashes (\) from the user input data (with the PHP stripslashes() function)

        The next step is to create a function that will do all the checking for us

        <?php
        // define variables and set to empty values
        $name = $email = $gender = $comment = $website = "";

        if ($_SERVER["REQUEST_METHOD"] == "POST") {
        $name = test_input($_POST["name"]);
        $email = test_input($_POST["email"]);
        $website = test_input($_POST["website"]);
        $comment = test_input($_POST["comment"]);
        $gender = test_input($_POST["gender"]);
        }

        function test_input($data) {
        $data = trim($data);
        $data = stripslashes($data);
        $data = htmlspecialchars($data);
        return $data;
        }
        ?>

    VALIDACION CON REGEX 

        The preg_match() function searches a string for pattern, returning true if the pattern exists, and false otherwise.

        $name = test_input($_POST["name"]);
        if (!preg_match("/^[a-zA-Z-' ]*$/",$name)) {
        $nameErr = "Only letters and white space allowed";
        }

        


// 1_ validar y sanitizar las entradas, tanto en html como en sql
// 2_ ejecutar consulta a la base de datos
// 3_ establecer estado de loggeado, ¬øcookies y session?
// 4_ generar la respuesta en html















