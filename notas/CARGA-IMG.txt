PHP File Handling

    You can do a lot of damage if you do something wrong. Common errors are: 
    editing the wrong file, 
    filling a hard-drive with garbage data, 
    and deleting the content of a file by accident.

    PHP readfile() Function

        The readfile() function reads a file and writes it to the output buffer.

        The PHP code to read the file and write it to the output buffer is as follows 
        (the readfile() function returns the number of bytes read on success):

        <?php
        echo readfile("webdictionary.txt");
        ?>

        The readfile() function is useful if all you want to do is open up a file and read its contents.

    PHP Open File - fopen()

        The first parameter of fopen() contains the name of the file to be opened 
        and the second parameter specifies in which mode the file should be opened. 

        <?php
        $myfile = fopen("webdictionary.txt", "r") or die("Unable to open file!");
        echo fread($myfile,filesize("webdictionary.txt"));
        fclose($myfile);
        ?>

        MODES 

            r	Open a file for read only. File pointer starts at the beginning of the file
            
            w	Open a file for write only. Erases the contents of the file or creates a new file if it doesn't exist.
                File pointer starts at the beginning of the file
            
            a	Open a file for write only. The existing data in file is preserved. File pointer starts at the end of the file.
                Creates a new file if the file doesn't exist
            
            x	Creates a new file for write only. Returns FALSE and an error if file already exists
            
            r+	Open a file for read/write. File pointer starts at the beginning of the file
            
            w+	Open a file for read/write. Erases the contents of the file or creates a new file if it doesn't exist.
                File pointer starts at the beginning of the file
            
            a+	Open a file for read/write. The existing data in file is preserved. File pointer starts at the end of the file.
                Creates a new file if the file doesn't exist
           
            x+	Creates a new file for read/write. Returns FALSE and an error if file already exists



mysql_connect($host, $user, $pass) OR die("could not connect");

A OR B; si A es true B no se ejecuta

<?php
$site = "https://www.w3schools.com/";
fopen($site,"r")
or die("Unable to connect to $site");
?>

die() print and terminate the script, its an error handling function 

    PHP Read File - fread()

        The first parameter of fread() contains the name of the file to read from 
        and the second parameter specifies the maximum number of bytes to read.

        fread($myfile,filesize("webdictionary.txt"));

    PHP Close File - fclose()

        The fclose() function is used to close an open file.

        It's a good programming practice to close all files after you have finished with them. 
        You don't want an open file running around on your server taking up resources!

        <?php
        $myfile = fopen("webdictionary.txt", "r");
        // some code to be executed....
        fclose($myfile);
        ?>

    PHP Read Single Line - fgets()

        The fgets() function is used to read a single line from a file.

        <?php
        $myfile = fopen("webdictionary.txt", "r") or die("Unable to open file!");
        echo fgets($myfile);
        fclose($myfile);
        ?>

        After a call to the fgets() function, the file pointer has moved to the next line.

    PHP Check End-Of-File - feof()

        The feof() function checks if the "end-of-file" (EOF) has been reached.

        The feof() function is useful for looping through data of unknown length

        <?php
        $myfile = fopen("webdictionary.txt", "r") or die("Unable to open file!");
        // Output one line until end-of-file
        while(!feof($myfile)) {
        echo fgets($myfile) . "<br>";
        }
        fclose($myfile);
        ?>

    PHP Read Single Character - fgetc()

        The fgetc() function is used to read a single character from a file.

        <?php
        $myfile = fopen("webdictionary.txt", "r") or die("Unable to open file!");
        // Output one character until end-of-file
        while(!feof($myfile)) {
        echo fgetc($myfile);
        }
        fclose($myfile);
        ?>

        After a call to the fgetc() function, the file pointer moves to the next character.

PHP File Create/Write

    If you use fopen() on a file that does not exist, it will create it, 
    given that the file is opened for writing (w) or appending (a).

    $myfile = fopen("testfile.txt", "w")

    If you are having errors when trying to get this code to run, 
    check that you have granted your PHP file access to write information to the hard drive.

    PHP Write to File - fwrite()

        The first parameter of fwrite() contains the name of the file to write to 
        and the second parameter is the string to be written.

    PHP Overwriting

        All the existing data will be ERASED and we start with an empty file.

        <?php
        $myfile = fopen("newfile.txt", "w") or die("Unable to open file!");
        $txt = "Mickey Mouse\n";
        fwrite($myfile, $txt);
        $txt = "Minnie Mouse\n";
        fwrite($myfile, $txt);
        fclose($myfile);
        ?>

        OUTPUT:

            Mickey Mouse
            Minnie Mouse

PHP File Upload

    In your "php.ini" file, search for the file_uploads directive, and set it to On:

    file_uploads = On

    <!DOCTYPE html>
    <html>
    <body>

    <form action="upload.php" method="post" enctype="multipart/form-data">
    Select image to upload:
    <input type="file" name="fileToUpload" id="fileToUpload">
    <input type="submit" value="Upload Image" name="submit">
    </form>

    </body>
    </html>

    Make sure that the form uses method="post"
    The form also needs the following attribute: enctype="multipart/form-data". 
    It specifies which content-type to use when submitting the form

    The type="file" attribute of the <input> tag shows the input field as a file-select control,
    with a "Browse" button next to the input control

    <?php
    $target_dir = "uploads/";
    $target_file = $target_dir . basename($_FILES["fileToUpload"]["name"]);
    $uploadOk = 1;
    $imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));
    // Check if image file is a actual image or fake image
    if(isset($_POST["submit"])) {
    $check = getimagesize($_FILES["fileToUpload"]["tmp_name"]);
    if($check !== false) {
        echo "File is an image - " . $check["mime"] . ".";
        $uploadOk = 1;
    } else {
        echo "File is not an image.";
        $uploadOk = 0;
    }
    }
    ?>

    $target_dir = "uploads/" - specifies the directory where the file is going to be placed
    $target_file specifies the path of the file to be uploaded
    $uploadOk=1 is not used yet (will be used later)
    $imageFileType holds the file extension of the file (in lower case)
    Next, check if the image file is an actual image or a fake image


    Check if File Already Exists

        // Check if file already exists
        if (file_exists($target_file)) {
        echo "Sorry, file already exists.";
        $uploadOk = 0;
        }

    Limit File Size

        The file input field in our HTML form above is named "fileToUpload".

        Now, we want to check the size of the file. 
        If the file is larger than 500KB, 
        an error message is displayed, 
        and $uploadOk is set to 0:

        // Check file size
        if ($_FILES["fileToUpload"]["size"] > 500000) {
        echo "Sorry, your file is too large.";
        $uploadOk = 0;
        }

    Limit File Type

        // Allow certain file formats
        if($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg"
        && $imageFileType != "gif" ) {
        echo "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";
        $uploadOk = 0;
        }

UPLOAD FORM 

    <!-- The data encoding type, enctype, MUST be specified as below -->
    <form enctype="multipart/form-data" action="__URL__" method="POST">
        <!-- MAX_FILE_SIZE must precede the file input field -->
        <input type="hidden" name="MAX_FILE_SIZE" value="30000" />
        <!-- Name of input element determines name in $_FILES array -->
        Send this file: <input name="userfile" type="file" />
        <input type="submit" value="Send File" />
    </form>

    The MAX_FILE_SIZE hidden field (measured in bytes) must precede the file input field, and its value is the maximum filesize accepted by PHP. This form element should always be used as it saves users the trouble of waiting for a big file being transferred only to find that it was too large and the transfer failed. Keep in mind: fooling this setting on the browser side is quite easy, so never rely on files with a greater size being blocked by this feature. It is merely a convenience feature for users on the client side of the application. The PHP settings (on the server side) for maximum-size, however, cannot be fooled.


    The global $_FILES will contain all the uploaded file information. 

    $_FILES['userfile']['name'] = The original name of the file on the client machine.

    $_FILES['userfile']['type'] = The mime type of the file, if the browser provided this information. An example would be "image/gif". This    mime type is however not checked on the PHP side and therefore don't take its value for granted.

    $_FILES['userfile']['size'] = The size, in bytes, of the uploaded file.

    $_FILES['userfile']['tmp_name'] = The temporary filename of the file in which the uploaded file was stored on the server.

    $_FILES['userfile']['error'] = The error code associated with this file upload.

    Files will, by default be stored in the server's default TEMPORARY directory, 
    unless another location has been given with the upload_tmp_dir directive in php.ini.

PHP basename() Function

    Return filename from the specified path:

    <?php
    $path = "/testweb/home.php";

    //Show filename
    echo basename($path) ."<br/>";

    //Show filename, but cut off file extension for ".php" files
    echo basename($path,".php");
    ?>

    OUT: 

        home.php
        home

move_uploaded_file(string $from, string $to): bool

    move_uploaded_file — Moves an uploaded file to a new location


First : make sure that the file is not empty.

Second : make sure the file name in English characters

    <?php

    /**
    * Check $_FILES[][name]
    *
    * @param (string) $filename - Uploaded file name.
    * @author Yousef Ismaeil Cliprz
    */
    function check_file_uploaded_name ($filename)
    {
        (bool) ((preg_match("`^[-0-9A-Z_\.]+$`i",$filename)) ? true : false);
    }

    ?>

Third : make sure that the file name not bigger than 250 characters.

    <?php

    /**
    * Check $_FILES[][name] length.
    *
    * @param (string) $filename - Uploaded file name.
    * @author Yousef Ismaeil Cliprz.
    */
    function check_file_uploaded_length ($filename)
    {
        return (bool) ((mb_strlen($filename,"UTF-8") > 225) ? true : false);
    }

    ?>

Fourth: Check File extensions and Mime Types that you want to allow in your project. You can use : pathinfo()

    REGEX = #^(gif|jpg|jpeg|jpe|png)$#i

Fifth: Check file size and make sure the limit of php.ini to upload files is what you want,

SIX : Check the file content if have a bad codes or something like this function http://php.net/manual/en/function.file-get-contents.php.

you SHOULD set the "upload_tmp_dir" value in php.ini to some directory around where your websites directory is, create that directory, and then set the same permissions on it that you have set for your websites directory.

Otherwise, when you upload a file and it goes into C:\WINDOWS\Temp, then you move it to your website directory, its permissions will NOT be set correctly. This will cause you problems if you then want to manipulate that file with something like ImageMagick's convert utility.

PHP FILESISTEM DIRECTORIES 

    Creating Directories in PHP

        mkdir(
        string $directory,
        int $permissions = 0777,
        bool $recursive = false,
        resource $context = ?
        ): bool

        <?php
        $result = mkdir ("/path/to/directory", "0777");
        ?>

        To create a directory in the same directory as your PHP script simply provide the directory name. 
        To create a new directory in a different directory specify the full path when calling mkdir().

        A second, optional argument allows the specification of permissions on the directory 
        (controlling such issues as whether the directory is writable)

    Deleting a Directory

        mdir() takes a single argument, the name of the directory to be deleted. 
        The deletion will only be successful if the directory is empty. 
        If the directory contains files or other sub-directories the deletion cannot be performed until those files and sub-directories are also deleted.

    DELETE A FILE 

        <?php
        $file = fopen("test.txt","w");
        echo fwrite($file,"Hello World. Testing!");
        fclose($file);

        unlink("test.txt");
        ?>

        UNLINK borra el archivo el path indicado 

        unlink ( string $filename , resource $context = ? ) : bool

        The unlink() function returns true if it deletes the file successfully or false otherwise.
        If the $filename doesn’t exist, the unlink() function also issues a warning and returns false.

    Finding and Changing the Current Working Directory

        <?php
        $current_dir = getCwd();

        echo "Current directory is $current_dir";
        ?>

        <?php

        $current_dir = getCwd();

        echo "Current directory is $current_dir <br>";

        chdir ("/tmp");

        $current_dir = getCwd();

        echo "Current directory is now $current_dir <br>";
        ?>

    Listing Files in a Directory

        The files in a directory can be read using the PHP scandir() function. scandir() takes two arguments. 
        The first argument is the path the directory to be scanned. 
        The second optional argument specifies how the directory listing is to be sorted. 
        If the argument is 1 the listing is sorted reverse-alphabetically. 
        If the argument is omitted or set to 0 the list is sorted alphabetically:


        <?php
        chdir ("/tmp");

        $current_dir = getCwd();

        echo "Current directory is now $current_dir";

        $array = scandir(".", 1);

        print_r($array);
        ?>

If no file is selected for upload in your form, 
PHP will return $_FILES['userfile']['size'] as 0,
 and $_FILES['userfile']['tmp_name'] as none.

PHP supports HTML array feature even with files.

    <form action="" method="post" enctype="multipart/form-data">
    <p>Pictures:
    <input type="file" name="pictures[]" />
    <input type="file" name="pictures[]" />
    <input type="file" name="pictures[]" />
    <input type="submit" value="Send" />
    </p>
    </form>

    <?php
    foreach ($_FILES["pictures"]["error"] as $key => $error) {
        if ($error == UPLOAD_ERR_OK) {
            $tmp_name = $_FILES["pictures"]["tmp_name"][$key];
            // basename() may prevent filesystem traversal attacks;
            // further validation/sanitation of the filename may be appropriate
            $name = basename($_FILES["pictures"]["name"][$key]);
            move_uploaded_file($tmp_name, "data/$name");
        }
    }
    ?>

This includes checks for file size (always check the length of the actual data versus the reported file size)
 as well as file type (the MIME type submitted by the browser can be inaccurate at best
 , and intentionally set to an incorrect value at worst).

$_FILES will be empty if a user attempts to upload a file greater than post_max_size in your php.ini

post_max_size should be >= upload_max_filesize in your php.ini.

pathinfo(string $path, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME): mixed


    Si no se proporciona el parámetro options, se devuelve un array asociativo que contiene 
    los siguientes elementos: dirname, basename, extension (si tiene), y filename.

    <?php
    $partes_ruta = pathinfo('/www/htdocs/inc/lib.inc.php');

    echo $partes_ruta['dirname'], "\n";
    echo $partes_ruta['basename'], "\n";
    echo $partes_ruta['extension'], "\n";
    echo $partes_ruta['filename'], "\n"; // desde PHP 5.2.0
    ?>

    OUT 
        /www/htdocs/inc
        lib.inc.php
        php
        lib.inc

File Uploads CONFIG EN PHP.INI FILE 

    file_uploads	"1"	            PHP_INI_SYSTEM	 
    upload_tmp_dir	NULL	        PHP_INI_SYSTEM	 
    max_input_nesting_level	64	    PHP_INI_PERDIR	 
    max_input_vars	1000	        PHP_INI_PERDIR	 
    upload_max_filesize	"2M"	    PHP_INI_PERDIR	 
    max_file_uploads	20	        PHP_INI_PERDIR

The available options are K (for Kilobytes), M (for Megabytes) and G (for Gigabytes), and are all case-insensitive. Anything else assumes bytes. 1M equals one Megabyte or 1048576 bytes. 1K equals one Kilobyte or 1024 bytes. These shorthand notations may be used in php.ini and in the ini_set() function. Note that the numeric value is cast to int; for instance, 0.5M is interpreted as 0.

A PHP script can be used with a HTML form to allow users to upload files to the server. Initially files are uploaded into a temporary directory and then relocated to a target destination by a PHP script.

    The process of uploading a file follows these steps −

    The user opens the page containing a HTML form featuring a text files, a browse button and a submit button.

    The user clicks the browse button and selects a file to upload from the local PC.

    The full path to the selected file appears in the text filed then the user clicks the submit button.

    The selected file is sent to the temporary directory on the server.

    The PHP script that was specified as the form handler in the form's action attribute checks that the file has arrived and then copies the file into an intended directory.

    The PHP script confirms the success to the user.

    As usual when writing files it is necessary for both temporary and final locations to have permissions set that enable file writing. If either is set to be read-only then process will fail.



CONFIGURACIONES PHP 

    ; Whether to allow HTTP file uploads.
    file_uploads = On

     Temporary directory for HTTP uploaded files.
    ; Will use system default if not set.
    ;upload_tmp_dir = 

    ; Maximum allowed size for uploaded files.
    upload_max_filesize = 16M

    ; Maximum number of files that can be uploaded via a single request
    max_file_uploads = 20

    ; Maximum size of POST data that PHP will accept.
    post_max_size = 20M

    max_input_time = 60
    memory_limit = 128M
    max_execution_time = 30


PROCESAMIENTO DE ARCHIVO CON PHP SV SIDE 

    is_uploaded_file(string $filename): bool INDICA SI EL ARCHIVO PROVIENE DE UN PEDIDO MEDIANTE HTTP POST 

    in_array(mixed $needle, array $haystack, bool $strict = false): bool INDICA SI UN VALOR ESTA PRESENTE EN EL ARRAY

    is_dir(string $filename): bool SABER IS UN ARCHIVO ES UN DIRECTORIO 
    Returns true if the filename exists and is a directory, false otherwise.

