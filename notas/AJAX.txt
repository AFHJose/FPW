AJAX = Asynchronous JavaScript And XML.UTILIZA:

    A browser built-in XMLHttpRequest object (to request data from a web server)
    JavaScript and HTML DOM (to display or use the data)


AJAX PERMITE

    Read data from a web server - after the page has loaded
    Update a web page without reloading the page
    Send data to a web server - in the background


utilizar <button></button> para llamar una funcion en onclick="funcion()" y ejecutar el pedido al server 

EJ: 

    function loadDoc() {
    const xhttp = new XMLHttpRequest();
    xhttp.onload = function() {
        document.getElementById("demo").innerHTML = this.responseText;
        }
    xhttp.open("GET", "ajax_info.txt", true);
    xhttp.send();
    }

datos enviados en texto simple, XML o JSON 

SECUENCIA 

    1. An event occurs in a web page (the page is loaded, a button is clicked)
    2. An XMLHttpRequest object is created by JavaScript
    3. The XMLHttpRequest object sends a request to a web server
    4. The server processes the request
    5. The server sends a response back to the web page
    6. The response is read by JavaScript
    7. Proper action (like page update) is performed by JavaScript

FETCH API (FORMA MAS MODERNA DE REALIZAR PEDIDOS POR HTTP)

    Modern Browsers can use Fetch API instead of the XMLHttpRequest Object.

    The Fetch API interface allows web browser to make HTTP requests to web servers.

    If you use the XMLHttpRequest Object, Fetch can do the same in a simpler way.

AJAX - The XMLHttpRequest Object

    Create an XMLHttpRequest object
    Define a callback function
    Open the XMLHttpRequest object
    Send a Request to a server

CREACION
    variable = new XMLHttpRequest();

CALLBACK 

    xhttp.onload = function() {
    // What to do when the response is ready
    }

PEDIDO 

    xhttp.open("GET", "ajax_info.txt");
    xhttp.send();

SEGURIDAD

For security reasons, modern browsers do not allow access across domains.

This means that both the web page and the XML file it tries to load, must be located on the same server.

METODOS

    new XMLHttpRequest()	Creates a new XMLHttpRequest object
    abort()	Cancels the current request
    getAllResponseHeaders()	Returns header information
    getResponseHeader()	Returns specific header information
    open(method, url, async, user, psw)	Specifies the request

    method: the request type GET or POST
    url: the file location
    async: true (asynchronous) or false (synchronous)
    user: optional user name
    psw: optional password
    send()	Sends the request to the server
    Used for GET requests
    send(string)	Sends the request to the server.
    Used for POST requests
    setRequestHeader()	Adds a label/value pair to the header to be sent


PROPIEDADES

    onload	Defines a function to be called when the request is recived (loaded)
    onreadystatechange	Defines a function to be called when the readyState property changes
    readyState	Holds the status of the XMLHttpRequest.
    0: request not initialized
    1: server connection established
    2: request received
    3: processing request
    4: request finished and response is ready
    responseText	Returns the response data as a string
    responseXML	Returns the response data as XML data
    status	Returns the status-number of a request
    200: "OK"
    403: "Forbidden"
    404: "Not Found"
    For a complete list go to the Http Messages Reference
    statusText	Returns the status-text (e.g. "OK" or "Not Found")


Multiple Callback Functions

    en caso de tener mas un pedido AJAX en una pagina hay que tener una funcion para procesar el resultado de cada pedido 

    EJ

        loadDoc("url-1", myFunction1);

        loadDoc("url-2", myFunction2);

        function loadDoc(url, cFunction) {
        const xhttp = new XMLHttpRequest();
        xhttp.onload = function() {cFunction(this);}
        xhttp.open("GET", url);
        xhttp.send();
        }

        function myFunction1(xhttp) {
        // action goes here
        }
        function myFunction2(xhttp) {
        // action goes here
        }

STATE OF Request

    the onreadystatechange function is called every time the readyState changes.

    When readyState is 4 and status is 200, the response is ready:


Send a Request To a Server

    The XMLHttpRequest object is used to request data from a server.

    xhttp.open("GET", "ajax_info.txt", true);
    xhttp.send(); GET
    xhttp.send(string); POST 


    The url parameter of the open() method, is an address to a file on a server:

    Server requests should be sent asynchronously.

    The async parameter of the open() method should be set to true:


    The default value for the async parameter is async = true.

    GET VS POST 

    GET is simpler and faster than POST, and can be used in most cases.

    GET

        xhttp.open("GET", "demo_get2.asp?fname=Henry&lname=Ford");
        xhttp.send();

    POST 

        To POST data like an HTML form, add an HTTP header with setRequestHeader(). 
        Specify the data you want to send in the send() method:

        xhttp.open("POST", "ajax_test.asp");
        xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhttp.send("fname=Henry&lname=Ford");


        setRequestHeader(header, value)	Adds HTTP headers to the request

                                        header: specifies the header name
                                        value: specifies the header value


AJAX - Server Response

    responseText	get the response data as a string
    responseXML	    get the response data as XML data

    document.getElementById("demo").innerHTML = xhttp.responseText;

    getResponseHeader()	        Returns specific header information from the server resource
    getAllResponseHeaders()	    Returns all the header information from the server resource


UTILIZAR JSON PARA ENVIAR Y RECIBIR LA INFORMACION 

If you do not set header Cache-Control: no-cache the browser will cache the response and never re-submit the request, making debugging challenging. You can also add an always-different GET parameter, like a timestamp or random number (see bypassing the cache)


If the httpRequest variable is used globally, competing functions calling makeRequest() can overwrite each other, causing a race condition. Declaring the httpRequest variable local to a closure containing the AJAX functions avoids this.

<button id="ajaxButton" type="button">Make a request</button>

<script>
(function() {
  var httpRequest;
  document.getElementById("ajaxButton").addEventListener('click', makeRequest);

  function makeRequest() {
    httpRequest = new XMLHttpRequest();

    if (!httpRequest) {
      alert('Giving up :( Cannot create an XMLHTTP instance');
      return false;
    }
    httpRequest.onreadystatechange = alertContents;
    httpRequest.open('GET', 'test.html');
    httpRequest.send();
  }

  function alertContents() {
    if (httpRequest.readyState === XMLHttpRequest.DONE) {
      if (httpRequest.status === 200) {
        alert(httpRequest.responseText);
      } else {
        alert('There was a problem with the request.');
      }
    }
  }
})();
</script>

MANEJO DE ERRORES Y EXCEPCIONES

    function alertContents() {
    try {
        if (httpRequest.readyState === XMLHttpRequest.DONE) {
        if (httpRequest.status === 200) {
            alert(httpRequest.responseText);
        } else {
            alert('There was a problem with the request.');
        }
        }
    }
    catch( e ) {
        alert('Caught Exception: ' + e.description);
    }
    }


JSON PARSE Y ENCODE 

DECODE ASSOSIATIVE ARRAY CON JSON.parse

    function alertContents() {
    if (httpRequest.readyState === XMLHttpRequest.DONE) {
        if (httpRequest.status === 200) {
        var response = JSON.parse(httpRequest.responseText);
        alert(response.computedString);
        } else {
        alert('There was a problem with the request.');
        }
    }
    }
ENCODE ASSOSIATIVE ARRAY CON json_encode($array)

    $name = (isset($_POST['userName'])) ? $_POST['userName'] : 'no name';
    $computedString = "Hi, " . $name . "!";
    $array = ['userName' => $name, 'computedString' => $computedString];
    echo json_encode($array);


EJECUTAR FUNCION EN INTERVALOS: setInterval()

FORMDATA API 

Bypassing the cache

    var oReq = new XMLHttpRequest();

    oReq.open("GET", url + ((/\?/).test(url) ? "&" : "?") + (new Date()).getTime());
    oReq.send(null);

FETCH API ***

    The Fetch API interface allows web browser to make HTTP requests to web servers.

JavaScript Promises

    Promises simplify deferred and asynchronous computations. A promise represents an operation that hasn't completed yet.

    una promesa tiene dos funciones una en caso de exito y una en caso de error que se llaman al resolver la misma 


JSON.stringify()

    The JSON.stringify() method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.





